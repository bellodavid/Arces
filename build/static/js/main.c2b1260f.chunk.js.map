{"version":3,"sources":["components/Home.jsx","components/Content.jsx","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Home","className","to","Content","useState","isExpanded","setExpanded","deposit","setDeposit","withdraw","setWithdraw","expand","coinDeposit","setCoinDeposit","coinDepositETH","setCoinDepositETH","coinDepositBSC","setCoinDepositBSC","coinDepositW","setCoinDepositW","coinDepositETHW","setCoinDepositETHW","coinDepositBSCW","setCoinDepositBSCW","onClick","style","marginRight","App","path","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2b1260f.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\n\r\nfunction Home() {\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <header>\r\n                <h1 className=\"\">Arces</h1>\r\n            </header>\r\n            <section>\r\n                <div className=\"home_container\">\r\n                    <Link to=\"/contract\">\r\n                <button className=\"signup\">Sign Up</button>\r\n                </Link>\r\n                \r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","\r\nimport React, {useState} from 'react';\r\n\r\n\r\n\r\nfunction Content() {\r\n\r\n    const [isExpanded, setExpanded] = useState(true)\r\n    const [deposit, setDeposit] = useState(false);\r\n    const[withdraw, setWithdraw] = useState(false);\r\n\r\n    function expand(){\r\n        setExpanded(!isExpanded)\r\n    }\r\n    const expandDeposit = () =>{\r\n        setDeposit(true)\r\n        setWithdraw(false)\r\n    }\r\n    const expandWithdraw = () =>{\r\n        setWithdraw(true)\r\n        setDeposit(false)\r\n    }\r\n    \r\n    const [coinDeposit, setCoinDeposit] = useState(\" \");\r\n    const [coinDepositETH, setCoinDepositETH] = useState(\" \");\r\n    const [coinDepositBSC, setCoinDepositBSC] = useState(\" \");\r\n\r\n    const [coinDepositW, setCoinDepositW] = useState(\" \");\r\n    const [coinDepositETHW, setCoinDepositETHW] = useState(\" \");\r\n    const [coinDepositBSCW, setCoinDepositBSCW] = useState(\" \");\r\n    return (\r\n        <div>\r\n            <header>\r\n                <h1 className=\"\">Arces</h1>\r\n            </header>\r\n            <div className=\"coinbuttons\">\r\n                <div>\r\n                    <button onClick ={expand} className=\"coin\">BTC</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick = {expand} className=\"coin\">ETH</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick ={expand} className=\"coin\">BSC</button>\r\n                </div>\r\n            </div>\r\n            <section className=\"body__content\">\r\n            {!isExpanded &&\r\n                <div className=\"card\">\r\n                     <div className=\"transaction__btns\">\r\n                       <button onClick = {expandDeposit} className=\"deposit\">Deposit</button>\r\n                       <button onClick={expandWithdraw} className=\"deposit\">Withdraw</button>\r\n                        </div> \r\n                        {deposit? <div className=\"sec__coin\">\r\n                    <button onClick={() => {\r\n                        setCoinDeposit(!coinDeposit && \"You have deposited in   \");\r\n                    }}> {coinDeposit}BTC </button>\r\n                    <button onClick={() => {\r\n                        setCoinDepositETH(!coinDepositETH && \"You have deposited in   \");\r\n                    }}> {coinDepositETH}ETH </button>\r\n\r\n                    <button onClick={() => {\r\n                        setCoinDepositBSC(!coinDepositBSC && \"You have deposited in   \");\r\n                    }}> {coinDepositBSC} BSC </button>\r\n\r\n                    </div>\r\n                    : null}\r\n                        {withdraw? <div style={{marginRight: \"-45%\"}} className=\"sec__coin\">\r\n                        <button onClick={() => {\r\n                        setCoinDepositW(!coinDepositW && \"You have withdrawn in   \");\r\n                    }}> {coinDepositW}BTC </button>\r\n                    <button onClick={() => {\r\n                        setCoinDepositETHW(!coinDepositETHW && \"You have withdrawn in   \");\r\n                    }}> {coinDepositETHW}ETH </button>\r\n\r\n                    <button onClick={() => {\r\n                        setCoinDepositBSCW(!coinDepositBSCW && \"You have withdrawn in   \");\r\n                    }}> {coinDepositBSCW} BSC </button>\r\n\r\n                    \r\n                    </div> : null}\r\n                    </div>\r\n                }\r\n                    \r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content\r\n","import React from 'react'\nimport Home from './components/Home'\nimport './App.css';\nimport Content from './components/Content';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    \n    <Router>\n    <div className=\"app\">\n    \n    <Switch>\n    <Route path=\"/contract\">\n        <Content />\n\n      </Route>\n      <Route path=\"/\">\n        <Home />\n\n      </Route>\n      \n    </Switch>\n   \n\n    </div>\n   \n \n\n  </Router>\n\n  )\n}\n\nexport default App\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}